/*
 * Copyright (C) 2009-2012 David Sorokin <david.sorokin@gmail.com>.
 *
 * All rights reserved.
 *
 * Licensed under BSD3. See LICENSE for details.
 */

package ru.maritegra.aivika.experiment.generator

import java.io._

import scala.xml._
import scala.collection.mutable.{Map, Buffer}

import ru.maritegra.aivika.experiment._

/**
 * It represents an experiment generator.
 */
private[experiment] class ExperimentGenerator(val experiment: Experiment) {

  private val generators = Buffer[ItemGenerator]()
  private val bindings = Map[Item, ItemGenerator]()

  init()

  private def init() {

    file.mkdirs()

    var id = 0

    for (item <- experiment.items.buffer) {

      id += 1

      val generator = item match {

        case item @ TextItem(_) => new TextGenerator(this, item, id)
        case item @ HtmlItem(_) => new HtmlGenerator(this, item, id)

        case item @ TableItem(_) => new TableGenerator(this, item, id)
        case item @ TimeSeriesItem(_) => new TimeSeriesGenerator(this, item, id)
        case item @ LastValuesItem(_) => new LastValuesGenerator(this, item, id)
        case item @ HistogramItem(_) => new HistogramGenerator(this, item, id)
        case item @ XYChartItem(_) => new XYChartGenerator(this, item, id)
        case item @ StatisticsItem(_) => new StatisticsGenerator(this, item, id)
        case item @ DistributionChartItem(_) => new DistributionChartGenerator(this, item, id)
        case item @ PieChartItem(_) => new PieChartGenerator(this, item, id)

        case item @ CumulativeTableItem(_) => new CumulativeTableGenerator(this, item, id)
        case item @ CumulativeXYChartItem(_) => new CumulativeXYChartGenerator(this, item, id)
        case item @ CumulativeHistogramItem(_) => new CumulativeHistogramGenerator(this, item, id)
        case item @ CumulativeStatisticsItem(_) => new CumulativeStatisticsGenerator(this, item, id)
        case item @ DeviationChartItem(_) => new DeviationChartGenerator(this, item, id)
        case item @ CumulativeDistributionChartItem(_) => new CumulativeDistributionChartGenerator(this, item, id)
      }

      generators += generator
      bindings += item -> generator
    }
  }

  /**
   * Run the experiment.
   */
  def run() {

    val hs = for {
      (k, v) <- bindings
    } yield v.run()

    try {

      experiment.simulation.run(experiment.specs, experiment.runCount)

      saveIndex()

    } finally {

      for (h <- hs) {
        h.dispose()
      }
    }
  }

  /**
   * Run the experiment in parallel.
   */
  def runParallel() {

    val hs = for {
      (k, v) <- bindings
    } yield v.run()

    try {

      experiment.simulation.runParallel(experiment.specs, experiment.runCount)

      saveIndex()

    } finally {

      for (h <- hs) {
        h.dispose()
      }
    }
  }

  /**
   * Get the directory file.
   */
  lazy val file: File = experiment.dir.toFile()

  /**
   * Get the directory uri.
   */
  lazy val uri: String = file.getName()

  /**
   * Get the file's uri.
   */
  def uri(x: File): String = file.toURI().relativize(x.toURI()).toString

  private def saveIndex() {

    val f = new File(file, "index.html")
    XML.save(f.getPath(), toHtml)

    if (experiment.verbose) {
      println("Generated file " + f.getPath())
    }
  }

  private def toHtml: Node = {
    
    val description = {

      if (! experiment.description.isEmpty) {
        List(<p>{experiment.description}</p>)

      } else {
        List()
      }
    }

    val contents = Buffer[Node]()

    for (g <- generators) {

      contents ++= g.toHtml
      contents += <br />
    }

    <html>
      <head>
        <title>{experiment.title}</title>
      </head>
      <body>
        <h1>{experiment.title}</h1>
        {toTOC}
        <br />
        {description}
        {contents}
        <p>
          <font size="-1">
            Automatically generated by Aivika.
          </font>
        </p>
      </body>
    </html>
  }

  private def toTOC: Seq[Node] = {

    val b = Buffer[Node]()
    b += <h3>{experiment.toc}</h3>

    for (g <- generators) {
      b ++= g.toTOC
    }

    b
  }
}
